#pragma once

#include <assert.h>

class World;
class DisplayChar;

#define	FOREGROUND_BLACK 0
#define FOREGROUND_YELLOW FOREGROUND_GREEN | FOREGROUND_RED
#define FOREGROUND_CYAN FOREGROUND_BLUE | FOREGROUND_GREEN
#define FOREGROUND_MAGENTA FOREGROUND_BLUE | FOREGROUND_RED
#define FOREGROUND_WHITE FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED

#define	INTENSE_FOREGROUND_BLACK | FOREGROUND_INTENSITY
#define INTENSE_FOREGROUND_YELLOW FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY
#define INTENSE_FOREGROUND_CYAN FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_INTENSITY
#define INTENSE_FOREGROUND_MAGENTA FOREGROUND_BLUE | FOREGROUND_RED | FOREGROUND_INTENSITY
#define INTENSE_FOREGROUND_WHITE FOREGROUND_BLUE | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_INTENSITY

#define	BACKGROUND_BLACK 0
#define BACKGROUND_YELLOW BACKGROUND_GREEN | BACKGROUND_RED
#define BACKGROUND_CYAN BACKGROUND_BLUE | BACKGROUND_GREEN
#define BACKGROUND_MAGENTA BACKGROUND_BLUE | BACKGROUND_RED
#define BACKGROUND_WHITE BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED

#define	INTENSE_BACKGROUND_BLACK | BACKGROUND_INTENSITY
#define INTENSE_BACKGROUND_YELLOW BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_INTENSITY
#define INTENSE_BACKGROUND_CYAN BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_INTENSITY
#define INTENSE_BACKGROUND_MAGENTA BACKGROUND_BLUE | BACKGROUND_RED | BACKGROUND_INTENSITY
#define INTENSE_BACKGROUND_WHITE BACKGROUND_BLUE | BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_INTENSITY

enum class EntityType {
	Base,
	Wall,
	Floor
};

class Entity {
public:
	Entity(EntityType t) : _type(t), _x(0), _y(0), _w(nullptr) {}

	virtual DisplayChar* Disp() const = 0;

	void SetPos(World* w, int x, int y) {
		assert(_w == nullptr);

		_x = x;
		_y = y;
		_w = w;
	}

	EntityType GetType() const { return _type; }

private:
	EntityType _type;
	int _x;
	int _y;
	World* _w;
};
